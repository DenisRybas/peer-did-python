name: release

on:
  push:
    branches: [ stable ]
  workflow_dispatch:

jobs:

  checks:
    name: check releases
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      version_latest: ${{ steps.version_latest.outputs.version_latest }}
      already_released: ${{ steps.version_latest.outputs.version_latest == steps.current_version.outputs.current_version }}
      already_in_pypi: ${{ steps.check_in_pypi.outputs.pypi_versions != '' }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get current version
        id: current_version
        run: |
          python -m pip install . --no-deps
          out="$(pip show ${{ env.PKG_NAME }} | grep Version: | cut -d'' '' -f 2)"
          echo "$out"
          echo "::set-output name=current_version::$out"
        shell: bash
      - name: Get latest tag
        id: version_latest
        run: |
          out="$(git describe --abbrev=0 --tags | cut -d'v' -f 2)"
          echo "$out"
          echo "::set-output name=version_latest::$out"
        shell: bash
      - name: check if already deployed to PyPI
        id: check_in_pypi
        # Note. other options:
        #   - use 'pip install --no-deps PKG==VERSION' with current version
        #   - use 'pip index versions PKG==VERSION'
        #     (but it's a kind of experimental feature of pip >= 21.2)
        run: |
          python -m pip install --upgrade pip
          out="$(pip install --use-deprecated=legacy-resolver ${{ env.PKG_NAME }}== 2>&1 \
              | grep -E "Could not find .* ${{ steps.current_version.outputs.current_version }}(,|\))")"
          echo "::set-output name=pypi_versions::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior

  release-github:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/stable'
    steps:
      - uses: actions/checkout@v2
      - name: build dist
        if: needs.checks.outputs.already_released == 'false'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m build
      - uses: ncipollo/release-action@v1
        if: needs.checks.outputs.already_released == 'false'
        with:
          artifacts: "dist/*"
          tag: v${{ needs.checks.outputs.current_version }}
          commit: stable
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [checks, release-github]
    if: github.event_name == 'push' && github.ref == 'refs/heads/stable' && needs.checks.outputs.already_in_pypi == 'false'
    steps:
      - uses: actions/checkout@v2
      - name: download GitHub artifacts
        run: |
          mkdir -p dist
          cd dist
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ needs.checks.outputs.current_version }} \
            | jq -r ".assets[] | select(.name | contains(\"${{ env.PKG_NAME }}\")) | .browser_download_url" \
            | wget -i -
          ls
        shell: bash
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
            user: __token__
            password: ${{ secrets.PYPI_API_TOKEN }}
